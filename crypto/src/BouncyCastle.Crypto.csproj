<?xml version="1.0" encoding="utf-8"?>
<Project Sdk="Microsoft.NET.Sdk">
    <Import Project="$(NuGetPackageRoot)net4x.nugetutility/$(NuGetUtilityVersion)/build/NuGet.Utility.props" Condition="Exists('$(NuGetPackageRoot)net4x.nugetutility/$(NuGetUtilityVersion)/build/NuGet.Utility.props')" />
    <PropertyGroup>
        <Version>$(VersionPrefix).$(VersionSuffix)</Version>
        <TargetFrameworks>net6.0;netstandard2.0;net461;net45;net40;net35</TargetFrameworks>
        <PackageOutputPath>$(SolutionDir)Packages/</PackageOutputPath>
        <GeneratePackageOnBuild>True</GeneratePackageOnBuild>
        <RootNamespace>Org.BouncyCastle</RootNamespace>
        <AssemblyOriginatorKeyFile>..\..\BouncyCastle.NET.snk</AssemblyOriginatorKeyFile>
        <SignAssembly>true</SignAssembly>
        <NoWarn>1591</NoWarn>
        <LangVersion>latest</LangVersion>
        <AssemblyName>BouncyCastle.Cryptography</AssemblyName>
        <AssemblyTitle>BouncyCastle.NET Cryptography ($(TargetFramework))</AssemblyTitle>
        <Authors>Legion of the Bouncy Castle Inc.</Authors>
        <Company>Legion of the Bouncy Castle Inc.</Company>
        <Copyright>Copyright Â© Legion of the Bouncy Castle Inc. 2000-2024</Copyright>
        <Description>BouncyCastle.NET is a popular cryptography library for .NET</Description>
        <PackageIcon>packageIcon.png</PackageIcon>
        <PackageIconUrl>https://www.bouncycastle.org/stable/nuget/csharp/packageIcon.png</PackageIconUrl>
        <PackageId>Net4x.BouncyCastle.Cryptography</PackageId>
        <PackageLicenseExpression>MIT</PackageLicenseExpression>
        <PackageProjectUrl>https://www.bouncycastle.org/stable/nuget/csharp/website</PackageProjectUrl>
        <PackageReadmeFile>README.md</PackageReadmeFile>
        <PackageReleaseNotes>https://www.bouncycastle.org/stable/nuget/csharp/release_notes</PackageReleaseNotes>
        <PackageTags>bouncycastle cryptography dtls encryption open-source openpgp post-quantum security tls</PackageTags>
        <Product>BouncyCastle.NET</Product>
        <PublishRepositoryUrl>true</PublishRepositoryUrl>
        <Title>BouncyCastle.NET Cryptography</Title>
        <Configurations>Debug;Release;Publish</Configurations>
    </PropertyGroup>
    <!-- CI systems other than GitLab might need different conditions -->
    <PropertyGroup Condition="'$(CI)' != ''">
        <!-- Deterministic build. -->
        <ContinuousIntegrationBuild>true</ContinuousIntegrationBuild>
    </PropertyGroup>
    <!--Source-Level Debugging-->
    <PropertyGroup>
        <!-- Any custom target adding things to the Compile item group needs BeforeTargets="BeforeCompile".	-->
        <EmbedUntrackedSources>true</EmbedUntrackedSources>
        <!-- Tell SourceLink to use this remote to derive the published git repository URL and source links. -->
        <GitRepositoryRemoteName>public</GitRepositoryRemoteName>
        <IncludeSymbols>true</IncludeSymbols>
        <SymbolPackageFormat>snupkg</SymbolPackageFormat>
        <EnablePackageValidation>false</EnablePackageValidation>
        <PackageValidationBaselineVersion>2.0.0</PackageValidationBaselineVersion>
        <NoWarn Condition="'$(SignAssembly)' != 'true'">$(NoWarn);CP0003</NoWarn>
        <NoWarn>$(NoWarn);CP0002;CP0005;CP0006</NoWarn>
        <RunAnalyzersDuringBuild>False</RunAnalyzersDuringBuild>
    </PropertyGroup>
    <!--Package Validation-->
    <PropertyGroup Condition="'$(Configuration)'=='Debug'">
        <DefineConstants>DEBUG;TRACE</DefineConstants>
    </PropertyGroup>
    <PropertyGroup Condition="'$(Configuration)'=='Release'">
        <DefineConstants />
        <GenerateDocumentationFile>true</GenerateDocumentationFile>
        <Optimize>True</Optimize>
    </PropertyGroup>
    <PropertyGroup Condition="'$(Configuration)'=='Publish'">
        <DefineConstants />
        <GenerateDocumentationFile>true</GenerateDocumentationFile>
        <!-- Deterministic build. -->
        <ContinuousIntegrationBuild>true</ContinuousIntegrationBuild>
        <Optimize>True</Optimize>
    </PropertyGroup>
    <ItemGroup>
        <None Include="..\..\LICENSE.md" Pack="true" PackagePath="\" />
        <None Include="..\..\packageIcon.png" Pack="true" PackagePath="\" />
        <None Include="..\..\README.md" Pack="true" PackagePath="\" />
    </ItemGroup>
    <ItemGroup>
        <PackageReference Include="Net4x.AsyncBridge" Version="$(Net4xAsyncBridgeVersion).$(VersionBuildSuffix)" />
        <PackageReference Include="Net4x.NuGetUtility" PrivateAssets="All" Version="$(NuGetUtilityVersion)" />
        <PackageReference Include="Microsoft.NETFramework.ReferenceAssemblies" Version="1.0.3" PrivateAssets="all" IncludeAssets="runtime; build; native; contentfiles; analyzers; buildtransitive" />
        <PackageReference Include="Microsoft.SourceLink.GitHub" Version="8.0.0" PrivateAssets="all" IncludeAssets="runtime; build; native; contentfiles; analyzers; buildtransitive" />
    </ItemGroup>
    <Target Name="FixAssemblyAttributes" AfterTargets="GetBuildVersion">
        <PropertyGroup>
            <!-- Here we can override/use any MSBuild properties set by Nerdbank.GitVersioning -->
        </PropertyGroup>
    </Target>
    <Target Name="SignAssemblies" AfterTargets="PostBuildEvent" Condition="'$(Configuration)'=='Publish'">
        <Exec Command="call &quot;$(ProjectDir)..\..\signfile.bat&quot; &quot;$(TargetPath)&quot;" IgnoreStandardErrorWarningFormat="true" />
    </Target>
    <Import Project="$(NuGetPackageRoot)net4x.nugetutility/$(NuGetUtilityVersion)/build/NuGet.Utility.targets" Condition="Exists('$(NuGetPackageRoot)net4x.nugetutility/$(NuGetUtilityVersion)/build/NuGet.Utility.targets')" />
</Project>